#summary How to use the command line interface.

= Introduction = 

The command line interface is useful when ant is not available. Often, this is how dbdeploy is used when deploying to production databases.

= Usage =

{{{
	java -cp dbdeploy-cli-3.0-SNAPSHOT.jar net.sf.dbdeploy.CommandLineTarget
}}}

(replace dbdeploy-cli-3.0-SNAPSHOT.jar with the version of the cli jar you are using.)

This will display a usage statment:

{{{
usage: dbdeploy
 -D,--driver <arg>            database driver class
 -d,--dbms <arg>              dbms type
    --deltaset <arg>          delta set name (default: Main)
 -o,--outputfile <arg>        output file
 -P,--password <arg>          database password
 -s,--scriptdirectory <arg>   directory containing change scripts
                              (default: .)
 -U,--userid <arg>            database user id
 -u,--url <arg>               database url
}}}

You need to supply all values that don't have a default. In addition, you'll need to add the database driver you are using to the java class path. Here's an example:

{{{
java -cp mysql-connector-java-5.1.7-bin.jar:dbdeploy-cli-3.0-SNAPSHOT-jar-with-dependencies.jar \
   net.sf.dbdeploy.CommandLineTarget \
   -U dbdeploy \
   -P dbdeploy \
   -D com.mysql.jdbc.Driver \
   -u jdbc:mysql://localhost/dbdeploy \
   -d mysql \
   -o consolidated_script.sql \
   -s dbdeploy-core/example_scripts/
}}}

This will examine the database to see what change scripts are applied, examine the script source directory to see what is available, then build a script consolidated_script.sql with the changes to run against the database.

{{{
Changes currently applied to database:
  (none)
Scripts available:
  1, 2
To be applied:
  1, 2
}}}

Note: dbdeploy only ever reads from the database, it never writes. You need to use your database's tool to execute the resulting script.

 
